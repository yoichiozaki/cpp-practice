#include <bits/stdc++.h>
using namespace std;

// しゃくとり法
// しゃくとり法は以下のような問題に使えるテクニック
// 長さnの数列a_1, a_2, ..., a_nにおいて，
//     - 「条件」を満たす区間（連続する部分列）のうち，最小の長さを求めよ
//     - 「条件」を満たす区間（連続する部分列）のうち，最大の長さを求めよ
//     - 「条件」を満たす区間（連続する部分列）を数え上げよ
// しゃくとり法を用いることで，「条件」を満たす区間をすべて求めることができる
// 愚直にやるとnC2通り調べることになるのでO(n^2)かかってしまうが，しゃくとり法を用いることでO(n)で求められる
// 計算量は，2つのポインタを左から右へ動かしただけなのでO(n)

// int right = 0;
// for (int left = 0; left < n; left++) {
//     while (right < n && rightを1個勧めたときに満たすべき条件) {
//         right++;
//     }
//     // ここに来た時点でrightは条件を満たす最大値なのでなにかする
//
//     // leftをインクリメントする準備をする
//     // ここでrightをリセットせずに使い回すのがポイント
// }

// 以下のいずれかを満たすような「条件」に対して，しゃくとり法が有効に働く
// - 区間[left, right)が「条件」を満たすなら，それに含まれる区間も「条件」を満たす
// - 区間[left, right)が「条件」を満たすなら，それを含む区間も「条件」を満たす

// しゃくとり法と二分探索法は似ている
// - 区間の左端leftを固定したとき，条件を満たす区間の右端rightに単調性がある（つまり，途中から条件を満たさなくなる・途中以降条件を満たす） => 二分探索法
// - 区間の左端leftを固定したとき，条件を満たす区間の右端rightの最大値・最小値は講義単調増加関数である => しゃくとり法

int main() {
    return 0;
}